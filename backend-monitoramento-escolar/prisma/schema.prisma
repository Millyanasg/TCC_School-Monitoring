// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserType {
    admin
    parent
    driver
    unset
}

model User {
    id        Int      @id @default(autoincrement())
    email     String   @unique
    password  String
    phones    String[] @default([])
    name      String
    lastName  String
    type      UserType
    driver    Driver?
    parent    Parent?
    school    School?
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model Parent {
    id          Int           @id @default(autoincrement()) @map("id")
    userId      Int           @unique
    parent_user User          @relation(fields: [userId], references: [id]) // A user can be a parent
    children    Child[] // A parent can have many students
    homeAddress HomeAddress[] // A parent can have many addresses
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @default(now()) @updatedAt

    Request Request[]
}

model HomeAddress {
    id        Int      @id @default(autoincrement())
    street    String
    number    Int
    city      String
    state     String
    zipCode   String
    latitude  Float
    longitude Float
    parentId  Int
    parent    Parent   @relation(fields: [parentId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model Driver {
    id               Int      @id @default(autoincrement())
    plate            String
    car              String
    model            String
    year             Int
    color            String
    seats            Int
    userId           Int      @unique // A user can be a driver
    user             User     @relation(fields: [userId], references: [id])
    assignedChildren Child[] // A driver can have many students
    createdAt        DateTime @default(now())
    updatedAt        DateTime @default(now()) @updatedAt

    Request Request[]
}

model School {
    id          Int      @id @default(autoincrement())
    name        String
    address     String
    latitude    Float
    longitude   Float
    userId      Int      @unique
    user        User     @relation(fields: [userId], references: [id])
    studentList Child[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt
}

model Child {
    id        Int      @id @default(autoincrement())
    name      String   @default("nome")
    lastName  String   @default("sobre nome")
    birthDate DateTime @default(now())
    grade     String   @default("0")
    parentId  Int
    schoolId  Int?
    driverId  Int?

    parent         Parent           @relation(fields: [parentId], references: [id])
    driver         Driver?          @relation(fields: [driverId], references: [id])
    school         School?          @relation(fields: [schoolId], references: [id])
    ChildLocations ChildLocations[]
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @default(now()) @updatedAt
    Request        Request[]

    @@map("Student")
}

// A parent can allow a driver to pick up their child
enum Permission {
    allowed // A parent can set a request so the driver is allowed to pick up their child
    disallowed // A parent can remove the permission, or if the driver can remove his own permission
    pending // While the driver didn't accept the request the status is pending
}

model Request {
    id        Int        @id @default(autoincrement())
    parentId  Int
    driverId  Int
    childId   Int
    status    Permission @default(pending)
    parent    Parent     @relation(fields: [parentId], references: [id])
    driver    Driver     @relation(fields: [driverId], references: [id])
    child     Child      @relation(fields: [childId], references: [id])
    createdAt DateTime   @default(now())
    updatedAt DateTime   @default(now()) @updatedAt
}

enum LocationType {
    pickup
    dropoff
}

model ChildLocations {
    id        Int          @id @default(autoincrement())
    childId   Int
    latitude  Float
    longitude Float
    type      LocationType
    child     Child        @relation(fields: [childId], references: [id])
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
}

enum seed_type {
    ADMIN
    COMMON
}

model Seed {
    id        String    @id @default(cuid())
    type      seed_type @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}
